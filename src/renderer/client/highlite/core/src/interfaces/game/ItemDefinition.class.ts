import type { Recipe } from './Recipe.class';
import type { SkillExperience } from './SkillExperience.class';

export interface ItemDefinition {
    _canIOU: boolean;
    _cost: number;
    _description: string;
    _edibleEffects: unknown;
    _edibleResults: unknown;
    _equipmentSpriteId: number;
    _equipmentSpriteSheet: string;
    _equipmentSpriteSheetId: number;
    _equipmentType: number;
    _equippableEffects: SkillExperience[];
    _equippableRequirements: SkillExperience[];
    _expFromObtaining: SkillExperience;
    _hasUniqueData: boolean;
    _id: number;
    _inventoryActions: Array<number>;
    _isForMission: unknown;
    _isMembers: boolean;
    _isNamePlural: boolean;
    _isNamePronoun: boolean;
    _isStackable: boolean;
    _isTradeable: boolean;
    _json: unknown;
    _measureWord: string;
    _metalType: number;
    _name: string;
    _nameCapitalized: string;
    _recipe: Recipe;
    _removeEquipmentOnEquip: Array<number>;
    _resourceProbability: number;
    _weaponSpeed: number;

    get CanIOU(): boolean;
    get Cost(): number;
    get Description(): string;
    get EdibleEffects(): unknown;
    get EdibleResults(): unknown;
    get EquipmentSpriteId(): number;
    get EquipmentSpriteSheet(): string;
    get EquipmentSpriteSheetId(): number;
    get EquipmentType(): number;
    get EquippableEffects(): SkillExperience[];
    get EquippableRequirements(): SkillExperience[];
    get ExpFromObtaining(): SkillExperience;
    get HasUniqueData(): boolean;
    get HidesSpritesUnderneath(): boolean;
    get ID(): number;
    get InventoryActions(): Array<number>;
    get IsForMission(): unknown;
    get IsMembers(): boolean;
    get IsNamePlural(): boolean;
    get IsNamePronoun(): boolean;
    get IsStackable(): boolean;
    get IsTradeable(): boolean;
    get MeasureWord(): string;
    get MetalType(): number;
    get Name(): string;
    get NameCapitalized(): string;
    get Recipe(): Recipe;
    get RemoveEquipmentOnEquip(): Array<number>;
    get ResourceProbability(): number;
    get WeaponSpeed(): number;
}
